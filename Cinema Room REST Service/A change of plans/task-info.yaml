type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/controller/Controller.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.Modal.BookedSeat;
    import cinema.Modal.Hall;
    import cinema.Modal.Seat;
    import cinema.bootstrap.Bootstrap;
    import cinema.exceptions.AlreadyPurchasedException;
    import cinema.exceptions.RowOrColumnOutOfBoundsException;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;


    import java.util.*;

    @RestController
    public class Controller {

        public Hall hall = new Hall();
        public Bootstrap bootstrap = new Bootstrap(hall);
        public Map<String, Object> mapOfHall = new HashMap<>();
        public List<BookedSeat> bookedSeats =  Collections.synchronizedList(new ArrayList<>());


        @GetMapping("/seats")
        public Map<String, Object> fetchSeats() {
            mapOfHall.put("total_rows", Hall.getTotal_rows());
            mapOfHall.put("total_columns", Hall.getTotal_columns());
            mapOfHall.put("available_seats", hall.getAvailableSeats());
            return mapOfHall;
        }

        @PostMapping("/purchase")
        public BookedSeat postSeatPurchase(@RequestBody Seat seat) {
            // check if the given seat is available
            List<BookedSeat> availableSeats = hall.getAvailableSeats();

                if(seat.getRow() <= 0
                        || seat.getRow() > 9
                        || seat.getColumn()  <= 0
                        || seat.getColumn() > 9
                ) {
                    throw new RowOrColumnOutOfBoundsException();

                } else {
                    for(Seat s : availableSeats) {
                        if(s.getRow() == seat.getRow() && s.getColumn() == seat.getColumn()) {
                            BookedSeat bookedSeat = new BookedSeat(seat.getRow(), seat.getColumn());
                            bookedSeats.add(bookedSeat);
                            // update availableSeats
                            hall.updateAvailableSeats(bookedSeat);
                            return bookedSeat;
                        }
                    }
                    throw new AlreadyPurchasedException();

                }
        }


    }
  learner_created: true
- name: src/cinema/Modal/Hall.java
  visible: true
  text: |
    package cinema.Modal;

    import cinema.bootstrap.Bootstrap;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.ArrayList;
    import java.util.Iterator;
    import java.util.List;

    public class Hall {
        @JsonProperty
        public static  int total_rows;
        @JsonProperty
        public static  int total_columns;
        @JsonProperty
        public List<BookedSeat> available_seats;



        public Hall() {
            this.total_rows = 9;
            this.total_columns = 9;
            this.available_seats = null;

        }

        public static int getTotal_rows() {
            return total_rows;
        }

        public static int getTotal_columns() {
            return total_columns;
        }

        public List<BookedSeat> getAvailableSeats() {
            return available_seats;
        }

        public void setAvailableSeats(List<BookedSeat> availableSeats) {
            this.available_seats = availableSeats;
        }

        public void updateAvailableSeats(BookedSeat seat) {
            Iterator<BookedSeat> iterator = available_seats.iterator();
            while(iterator.hasNext()){
                BookedSeat s = iterator.next();
                if(seat.getColumn() == s.getColumn() && seat.getRow() == s.getRow()) {
                    iterator.remove();
                }
            }

        }
    }
  learner_created: true
- name: src/cinema/exceptions/ExceptionResponse.java
  visible: true
  text: |
    package cinema.exceptions;

    public class ExceptionResponse {
        private String error;

        public ExceptionResponse(String error) {
            super();
            this.error = error;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }
    }
  learner_created: true
- name: src/cinema/Modal/BookedSeat.java
  visible: true
  text: |
    package cinema.Modal;

    public class BookedSeat extends Seat{
        public int price;

        public BookedSeat(int row, int column){
            super(row, column);
            this.price = this.row <= 4 ? 10 : 8;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }
    }
  learner_created: true
- name: src/cinema/exceptions/CustomizedResponseEntityExceptionHandler.java
  visible: true
  text: |
    package cinema.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.bind.annotation.RestControllerAdvice;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    @RestControllerAdvice
    @RestController
    public class CustomizedResponseEntityExceptionHandler extends ResponseEntityExceptionHandler {
        @ExceptionHandler(AlreadyPurchasedException.class)
        public final ResponseEntity<ExceptionResponse> handleNotFoundException(AlreadyPurchasedException ex){
            ExceptionResponse exception = new ExceptionResponse(ex.getError());
            return new ResponseEntity<ExceptionResponse>(exception, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(RowOrColumnOutOfBoundsException.class)
        public final ResponseEntity<ExceptionResponse> rowOrColumnNotFoundException(RowOrColumnOutOfBoundsException ex){
            ExceptionResponse exception = new ExceptionResponse(ex.getError());
            return new ResponseEntity<ExceptionResponse>(exception, HttpStatus.BAD_REQUEST);
        }
    }
  learner_created: true
- name: src/cinema/Modal/Seat.java
  visible: true
  text: |
    package cinema.Modal;

    public class Seat {
        public int row;
        public int column;


        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
        }

        //getters and setters
        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }
    }
  learner_created: true
- name: src/cinema/Modal/AvailableSeat.java
  visible: true
  text: |
    package cinema.Modal;

    import java.util.ArrayList;
    import java.util.List;

    public class AvailableSeat extends Seat{
        public boolean available;
        public List<Seat> availableSeats = new ArrayList<>();


        public AvailableSeat(int row, int col, boolean available) {
           super(row, col);
           this.available = available;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public boolean available() {
            return available;
        }

        public void setAvailable(boolean available) {
            this.available = available;
        }

    }
  learner_created: true
- name: src/cinema/exceptions/AlreadyPurchasedException.java
  visible: true
  text: |
    package cinema.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The ticket has been already purchased!")
    public class AlreadyPurchasedException extends RuntimeException{
        private String error;
        public AlreadyPurchasedException() {
            super();
            this.error = "The ticket has been already purchased!";
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }
    }
  learner_created: true
- name: src/cinema/exceptions/RowOrColumnOutOfBoundsException.java
  visible: true
  text: |
    package cinema.exceptions;

    import io.micrometer.core.instrument.MultiGauge;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The number of a row or a column is out of bounds!")
    public class RowOrColumnOutOfBoundsException extends RuntimeException{
        public String error;
        public RowOrColumnOutOfBoundsException() {
            super();
            this.error = "The number of a row or a column is out of bounds!";

        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }
    }
  learner_created: true
- name: src/cinema/bootstrap/Bootstrap.java
  visible: true
  text: |
    package cinema.bootstrap;

    import cinema.Modal.AvailableSeat;
    import cinema.Modal.BookedSeat;
    import cinema.Modal.Hall;
    import cinema.Modal.Seat;

    import java.util.*;

    public class Bootstrap {


        List<Seat> seatsList = new ArrayList();
        List<AvailableSeat> availableSeats = new ArrayList<>();
        List<BookedSeat> seatsWithPrice = Collections.synchronizedList(new ArrayList<>());


        public Bootstrap( Hall hall){
            createAvailableSeats(hall);
            filterAvailableSeats();
            hall.setAvailableSeats(seatsWithPrice);
        };

        public void createAvailableSeats(Hall hall) {
            for(int i = 1; i <= hall.getTotal_rows(); i++) {
                for(int j = 1; j <= hall.getTotal_columns(); j++) {
                    availableSeats.add(new AvailableSeat(i, j, true));
                }
            }
        }

        /**
         * method to select all seats that are in availabe seats
         * */
        public void filterAvailableSeats(){
            for(AvailableSeat seat : availableSeats) {
                if(seat.available()){
                    seatsWithPrice.add(new BookedSeat(seat.getRow(), seat.getColumn()));
                }
            }
        }


        public List<Seat> getSeatsList() {
            return seatsList;
        }

        public void setSeatsList(List<Seat> seatsList) {
            this.seatsList = seatsList;
        }

        public List<AvailableSeat> getAvailableSeats() {
            return availableSeats;
        }

        public void setAvailableSeats(List<AvailableSeat> availableSeats) {
            this.availableSeats = availableSeats;
        }
    }
  learner_created: true
- name: src/cinema/Modal/BookedTicket.java
  visible: true
  learner_created: true
- name: src/cinema/exceptions/WrongTokenException.java
  visible: true
  learner_created: true
- name: src/cinema/Modal/Token.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 26 Mar 2022 18:43:55 UTC
record: 3
